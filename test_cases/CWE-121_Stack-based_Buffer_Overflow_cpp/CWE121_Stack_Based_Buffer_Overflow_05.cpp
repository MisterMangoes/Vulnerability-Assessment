//CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54

#include <cstdio>
#include <cassert>
#include <alloca.h>

#define ALLOCA alloca

int dataMemorySize = 10;

void CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_badSink(int * data)
{
    {
        int source[10] = {0};
        size_t i;
        /* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */
        assert(dataMemorySize >= 10*sizeof(int));
        for (i = 0; i < 10; i++)
        {
            source[i] = data[i];
        }
        printf("%d\n", data[0]);
    }
}

void CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_badSink(int * data)
{
    CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e_badSink(data);
}

void CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_badSink(int * data)
{
    CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d_badSink(data);
}

void CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_badSink(int * data)
{
    CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c_badSink(data);
}

int main()
{
    int * data;
    data = NULL;
    /* FLAW: Allocate memory without using sizeof(int) */
    data = (int *)ALLOCA(dataMemorySize);
    CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b_badSink(data);
    printf("%s\n", "finished");
    return 0;
}
