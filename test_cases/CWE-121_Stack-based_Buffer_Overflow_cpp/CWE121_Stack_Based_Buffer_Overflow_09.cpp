//CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_74

#include <cstdio>
#include <cstring>
#include <map>
#include <cassert>

using namespace std;

int dataArraySize = 50;

void badSink(map<int, char *> dataMap)
{
    /* copy data out of dataMap */
    char * data = dataMap[2];
    {
        size_t i;
        char source[100];
        memset(source, 'C', 100-1); /* fill with 'C's */
        source[100-1] = '\0'; /* null terminate */
        /* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */
        assert(dataArraySize >= 100);
        for (i = 0; i < 100; i++)
        {
            data[i] = source[i];
        }
        data[100-1] = '\0'; /* Ensure the destination buffer is null terminated */
        printf("%s\n", data);
    }
}

int main()
{
    char * data;
    map<int, char *> dataMap;
    char dataBadBuffer[dataArraySize];
    /* FLAW: Set a pointer to a "small" buffer. This buffer will be used in the sinks as a destination
     * buffer in various memory copying functions using a "large" source buffer. */
    data = dataBadBuffer;
    data[0] = '\0'; /* null terminate */
    /* Put data in a map */
    dataMap[0] = data;
    dataMap[1] = data;
    dataMap[2] = data;
    badSink(dataMap);
    printf("%s\n", "finished");
    return 0;
}
