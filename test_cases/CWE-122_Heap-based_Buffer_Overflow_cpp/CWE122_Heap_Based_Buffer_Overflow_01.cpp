//CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01_bad

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>

/* SRC_STR is 32 char long, including the null terminator, for 64-bit architectures */
#define SRC_STR "0123456789abcdef0123456789abcde"

typedef struct _charVoid
{
    char charFirst[16];
    void * voidSecond;
    void * voidThird;
} charVoid;

int main()
{
    {
        charVoid * structCharVoid = (charVoid *)malloc(sizeof(charVoid));
        if (structCharVoid == NULL) {exit(-1);}
        structCharVoid->voidSecond = (void *)SRC_STR;
        /* Print the initial block pointed to by structCharVoid->voidSecond */
        printf("%s\n", (char *)structCharVoid->voidSecond);
        /* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */
        assert(sizeof(*structCharVoid) <= sizeof(structCharVoid->charFirst));
        memcpy(structCharVoid->charFirst, SRC_STR, sizeof(*structCharVoid));
        structCharVoid->charFirst[(sizeof(structCharVoid->charFirst)/sizeof(char))-1] = '\0'; /* null terminate the string */
        printf("%s\n", (char *)structCharVoid->charFirst);
        printf("%s\n", (char *)structCharVoid->voidSecond);
        free(structCharVoid);
    }
    printf("%s\n", "finished");
    return 0;
}