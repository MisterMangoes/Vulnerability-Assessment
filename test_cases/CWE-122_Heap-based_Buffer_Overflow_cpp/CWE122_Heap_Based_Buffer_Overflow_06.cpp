//CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_73

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <list>
#include <cassert>

using namespace std;

int dataArraySize = 50;

typedef struct _twoIntsStruct
{
    int intOne;
    int intTwo;
} twoIntsStruct;

void badSink(list<twoIntsStruct *> dataList)
{
    /* copy data out of dataList */
    twoIntsStruct * data = dataList.back();
    {
        twoIntsStruct source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
        assert(dataArraySize >= sizeof(source)/sizeof(source[0]));
        memmove(data, source, 100*sizeof(twoIntsStruct));
        printf("%d -- %d\n", (&data[0])->intOne, (&data[0])->intTwo);
        free(data);
    }
}

int main()
{
    twoIntsStruct * data;
    list<twoIntsStruct *> dataList;
    data = NULL;
    /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = (twoIntsStruct *)malloc(dataArraySize*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Put data in a list */
    dataList.push_back(data);
    dataList.push_back(data);
    dataList.push_back(data);
    badSink(dataList);
    printf("%s\n", "finished");
    return 0;
}