//CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_32

#include <cstdio>
#include <cstdlib>
#include <cassert>

typedef struct _twoIntsStruct
{
    int intOne;
    int intTwo;
} twoIntsStruct;

int main()
{
    twoIntsStruct * data;
    twoIntsStruct * *dataPtr1 = &data;
    twoIntsStruct * *dataPtr2 = &data;
    int dataArraySize = 50;
    data = NULL;
    {
        twoIntsStruct * data = *dataPtr1;
        /* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */
        data = (twoIntsStruct *)malloc(dataArraySize*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        *dataPtr1 = data;
    }
    {
        twoIntsStruct * data = *dataPtr2;
        {
            twoIntsStruct source[100];
            {
                size_t i;
                /* Initialize array */
                for (i = 0; i < 100; i++)
                {
                    source[i].intOne = 0;
                    source[i].intTwo = 0;
                }
            }
            {
                size_t i;
                /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
                assert(dataArraySize >= 100);
                for (i = 0; i < 100; i++)
                {
                    data[i] = source[i];
                }
                printf("%d -- %d\n", (&data[0])->intOne, (&data[0])->intTwo);
                free(data);
            }
        }
    }
    printf("%s\n", "finished");
    return 0;
}