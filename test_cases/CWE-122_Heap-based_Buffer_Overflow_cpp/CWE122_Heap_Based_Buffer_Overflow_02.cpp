//CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_34

#include <cstdio>
#include <cstdlib>
#include <cassert>

#define URAND31() (((unsigned)rand()<<30) ^ ((unsigned)rand()<<15) ^ rand())
#define RAND32() ((int)(rand() & 1 ? URAND31() : -URAND31() - 1))

typedef union
{
    int unionFirst;
    int unionSecond;
} unionType;

int main()
{
    int data;
    unionType myUnion;
    /* Initialize data */
    data = -1;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            int i;
            int * buffer = new int[10];
            /* initialize buffer */
            for (i = 0; i < 10; i++)
            {
                buffer[i] = 0;
            }
            /* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound
            * This code does check to see if the array index is negative */
            if (data >= 0)
            {
                buffer[data] = 1;
                /* Print the array values */
                assert(data < 10);
                for(i = 0; i < 10; i++)
                {
                    printf("%d\n", buffer[i]);
                }
            }
            else
            {
                printf("%s\n", "ERROR: Array index is negative.");
            }
            delete[] buffer;
        }
    }
    printf("%s\n", "finished");
    return 0;
}