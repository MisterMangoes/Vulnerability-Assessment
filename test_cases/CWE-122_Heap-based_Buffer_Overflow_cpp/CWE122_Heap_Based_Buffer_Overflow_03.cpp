//CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_81

#include <cstdio>
#include <cassert>

int dataArraySize = 50;

class TwoIntsClass 
{
    public: // Needed to access variables from label files
        int intOne;
        int intTwo;
};

class CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_81_base
{
public:
    /* pure virtual function */
    virtual void action(TwoIntsClass * data) const = 0;
};

class CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_81_bad : public CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_81_base
{
public:
    void action(TwoIntsClass * data) const;
};

void CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_81_bad::action(TwoIntsClass * data) const
{
    {
        TwoIntsClass source[100];
        {
            size_t i;
            /* Initialize array */
            for (i = 0; i < 100; i++)
            {
                source[i].intOne = 0;
                source[i].intTwo = 0;
            }
        }
        {
            size_t i;
            /* POTENTIAL FLAW: Possible buffer overflow if data < 100 */
            assert(dataArraySize >= 100);
            for (i = 0; i < 100; i++)
            {
                data[i] = source[i];
            }
            printf("%d\n", data[0].intOne);
            delete [] data;
        }
    }
}

int main()
{
    TwoIntsClass * data;
    data = NULL;
    /* FLAW: Allocate using new[] and point data to a small buffer that is smaller than the large buffer used in the sinks */
    data = new TwoIntsClass[dataArraySize];
    const CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_81_base& baseObject = CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_class_loop_81_bad();
    baseObject.action(data);
    printf("%s\n", "finished");
    return 0;
}
