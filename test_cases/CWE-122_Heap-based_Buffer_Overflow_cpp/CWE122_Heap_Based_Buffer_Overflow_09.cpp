//CWE122_Heap_Based_Buffer_Overflow__placement_new_09

#include <cstdio>
#include <cstdlib>
#include <new>
#include <cassert>

const int GLOBAL_CONST_TRUE = 1;

class OneIntClass 
{
    public: // Needed to access variables from label files
        int intOne;
};

class TwoIntsClass 
{
    public: // Needed to access variables from label files
        int intOne;
        int intTwo;
};

int main()
{
    char * data;
    char * dataBadBuffer = (char *)malloc(sizeof(OneIntClass));
    if (dataBadBuffer == NULL) {exit(-1);}
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Initialize data to a buffer small than the sizeof(TwoIntsClass) */
        data = dataBadBuffer;
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* The Visual C++ compiler generates a warning if you initialize the class with ().
             * This will cause the compile to default-initialize the object.
             * See http://msdn.microsoft.com/en-us/library/wewb47ee%28v=VS.100%29.aspx
             */
            /* POTENTIAL FLAW: data may not be large enough to hold a TwoIntsClass */
            TwoIntsClass * classTwo = new(data) TwoIntsClass;
            /* Initialize and make use of the class */
            assert(sizeof(data) >= sizeof(TwoIntsClass));
            classTwo->intOne = 5;
            classTwo->intTwo = 10; /* POTENTIAL FLAW: If sizeof(data) < sizeof(TwoIntsClass) then this line will be a buffer overflow */
            printf("%d\n", classTwo->intOne);
            printf("%d\n", classTwo->intTwo);
            free(data);
        }
    }
    printf("%s\n", "finished");
    return 0;
}