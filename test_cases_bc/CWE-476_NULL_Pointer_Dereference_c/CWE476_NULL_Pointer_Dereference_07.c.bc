; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-476_NULL_Pointer_Dereference_c/CWE476_NULL_Pointer_Dereference_07.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-476_NULL_Pointer_Dereference_c/CWE476_NULL_Pointer_Dereference_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [14 x i8] c"c_str != NULL\00", align 1
@.str.1 = private unnamed_addr constant [151 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-476_NULL_Pointer_Dereference_c/CWE476_NULL_Pointer_Dereference_07.c\00", align 1
@__PRETTY_FUNCTION__.f = private unnamed_addr constant [20 x i8] c"void f(char *, int)\00", align 1
@__const.main.inputString = private unnamed_addr constant [16 x i8] c"Hello\00\00\00\00\00\00\00\00\00\00\00", align 16
@stdin = external dso_local global %struct._IO_FILE*, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @f(i8* %input_str, i32 %size) #0 {
entry:
  %input_str.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %c_str = alloca i8*, align 8
  store i8* %input_str, i8** %input_str.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call i8* @malloc(i64 %conv)
  store i8* %call, i8** %c_str, align 8
  %1 = load i8*, i8** %c_str, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([151 x i8], [151 x i8]* @.str.1, i64 0, i64 0), i32 17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__PRETTY_FUNCTION__.f, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load i8*, i8** %c_str, align 8
  %3 = load i8*, i8** %input_str.addr, align 8
  %4 = load i32, i32* %size.addr, align 4
  %conv2 = sext i32 %4 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %3, i64 %conv2, i1 false)
  %5 = load i8*, i8** %c_str, align 8
  call void @free(i8* %5)
  store i8* null, i8** %c_str, align 8
  ret void
}

declare dso_local i8* @malloc(i64) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local void @free(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %inputString = alloca [16 x i8], align 16
  %inputBuffer = alloca [100 x i8], align 16
  %size = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [16 x i8]* %inputString to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.main.inputString, i32 0, i32 0), i64 16, i1 false)
  %1 = bitcast [100 x i8]* %inputBuffer to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 100, i1 false)
  store i32 1, i32* %size, align 4
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %inputBuffer, i64 0, i64 0
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %call = call i8* @fgets(i8* %arraydecay, i32 100, %struct._IO_FILE* %2)
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arraydecay1 = getelementptr inbounds [100 x i8], [100 x i8]* %inputBuffer, i64 0, i64 0
  %call2 = call i32 (i8*, ...) bitcast (i32 (...)* @atoi to i32 (i8*, ...)*)(i8* %arraydecay1)
  store i32 %call2, i32* %size, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay3 = getelementptr inbounds [16 x i8], [16 x i8]* %inputString, i64 0, i64 0
  %3 = load i32, i32* %size, align 4
  call void @f(i8* %arraydecay3, i32 %3)
  ret i32 0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare dso_local i8* @fgets(i8*, i32, %struct._IO_FILE*) #1

declare dso_local i32 @atoi(...) #1

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
