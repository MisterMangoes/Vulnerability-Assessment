; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_02.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_02.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [54 x i8] c"destMemorySize >= 5 * sizeof(char) * max_input_length\00", align 1
@.str.1 = private unnamed_addr constant [159 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_02.c\00", align 1
@__PRETTY_FUNCTION__.copy_input = private unnamed_addr constant [25 x i8] c"char *copy_input(char *)\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @copy_input(i8* %user_supplied_string) #0 {
entry:
  %user_supplied_string.addr = alloca i8*, align 8
  %dst_index = alloca i32, align 4
  %max_input_length = alloca i32, align 4
  %destMemorySize = alloca i32, align 4
  %dst_buf = alloca i8*, align 8
  %dst_buf_1 = alloca i8*, align 8
  %i = alloca i32, align 4
  %i_1 = alloca i32*, align 8
  store i8* %user_supplied_string, i8** %user_supplied_string.addr, align 8
  store i32 0, i32* %dst_index, align 4
  store i32 8, i32* %max_input_length, align 4
  %0 = load i32, i32* %max_input_length, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 4, %conv
  %conv1 = trunc i64 %mul to i32
  store i32 %conv1, i32* %destMemorySize, align 4
  %1 = load i32, i32* %destMemorySize, align 4
  %conv2 = sext i32 %1 to i64
  %call = call i8* @malloc(i64 %conv2)
  store i8* %call, i8** %dst_buf, align 8
  %2 = load i32, i32* %destMemorySize, align 4
  %conv3 = sext i32 %2 to i64
  %3 = load i32, i32* %max_input_length, align 4
  %conv4 = sext i32 %3 to i64
  %mul5 = mul i64 5, %conv4
  %cmp = icmp uge i64 %conv3, %mul5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([159 x i8], [159 x i8]* @.str.1, i64 0, i64 0), i32 30, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__PRETTY_FUNCTION__.copy_input, i64 0, i64 0)) #3
  unreachable

if.end:                                           ; preds = %if.then
  %4 = load i8*, i8** %dst_buf, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0
  store i8* %arrayidx, i8** %dst_buf_1, align 8
  store i32 0, i32* %i, align 4
  store i32* %i, i32** %i_1, align 8
  %5 = load i32*, i32** %i_1, align 8
  store i32 0, i32* %5, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4
  %conv7 = sext i32 %6 to i64
  %7 = load i8*, i8** %user_supplied_string.addr, align 8
  %call8 = call i64 @strlen(i8* %7)
  %add = add i64 %call8, 1
  %cmp9 = icmp ult i64 %conv7, %add
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %user_supplied_string.addr, align 8
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %10 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %10 to i32
  %cmp13 = icmp eq i32 38, %conv12
  br i1 %cmp13, label %if.then15, label %if.else28

if.then15:                                        ; preds = %for.body
  %11 = load i8*, i8** %dst_buf_1, align 8
  %12 = load i32, i32* %dst_index, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %dst_index, align 4
  %idx.ext = sext i32 %12 to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  store i8 38, i8* %add.ptr, align 1
  %13 = load i8*, i8** %dst_buf_1, align 8
  %14 = load i32, i32* %dst_index, align 4
  %inc16 = add nsw i32 %14, 1
  store i32 %inc16, i32* %dst_index, align 4
  %idx.ext17 = sext i32 %14 to i64
  %add.ptr18 = getelementptr inbounds i8, i8* %13, i64 %idx.ext17
  store i8 97, i8* %add.ptr18, align 1
  %15 = load i8*, i8** %dst_buf_1, align 8
  %16 = load i32, i32* %dst_index, align 4
  %inc19 = add nsw i32 %16, 1
  store i32 %inc19, i32* %dst_index, align 4
  %idx.ext20 = sext i32 %16 to i64
  %add.ptr21 = getelementptr inbounds i8, i8* %15, i64 %idx.ext20
  store i8 109, i8* %add.ptr21, align 1
  %17 = load i8*, i8** %dst_buf_1, align 8
  %18 = load i32, i32* %dst_index, align 4
  %inc22 = add nsw i32 %18, 1
  store i32 %inc22, i32* %dst_index, align 4
  %idx.ext23 = sext i32 %18 to i64
  %add.ptr24 = getelementptr inbounds i8, i8* %17, i64 %idx.ext23
  store i8 112, i8* %add.ptr24, align 1
  %19 = load i8*, i8** %dst_buf_1, align 8
  %20 = load i32, i32* %dst_index, align 4
  %inc25 = add nsw i32 %20, 1
  store i32 %inc25, i32* %dst_index, align 4
  %idx.ext26 = sext i32 %20 to i64
  %add.ptr27 = getelementptr inbounds i8, i8* %19, i64 %idx.ext26
  store i8 59, i8* %add.ptr27, align 1
  br label %if.end34

if.else28:                                        ; preds = %for.body
  %21 = load i8*, i8** %user_supplied_string.addr, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %22 to i64
  %arrayidx30 = getelementptr inbounds i8, i8* %21, i64 %idxprom29
  %23 = load i8, i8* %arrayidx30, align 1
  %24 = load i8*, i8** %dst_buf_1, align 8
  %25 = load i32, i32* %dst_index, align 4
  %inc31 = add nsw i32 %25, 1
  store i32 %inc31, i32* %dst_index, align 4
  %idx.ext32 = sext i32 %25 to i64
  %add.ptr33 = getelementptr inbounds i8, i8* %24, i64 %idx.ext32
  store i8 %23, i8* %add.ptr33, align 1
  br label %if.end34

if.end34:                                         ; preds = %if.else28, %if.then15
  br label %for.inc

for.inc:                                          ; preds = %if.end34
  %26 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %26, 1
  %27 = load i32*, i32** %i_1, align 8
  store i32 %add35, i32* %27, align 4
  br label %for.cond, !llvm.loop !2

for.end:                                          ; preds = %for.cond
  %28 = load i8*, i8** %dst_buf, align 8
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %28)
  %29 = load i8*, i8** %dst_buf, align 8
  ret i8* %29
}

declare dso_local i8* @malloc(i64) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %inputBuffer = alloca [8 x i8], align 1
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %inputBuffer, i64 0, i64 0
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %call = call i8* @fgets(i8* %arraydecay, i32 8, %struct._IO_FILE* %0)
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %inputBuffer, i64 0, i64 0
  %call2 = call i8* @copy_input(i8* %arraydecay1)
  ret i32 0
}

declare dso_local i8* @fgets(i8*, i32, %struct._IO_FILE*) #1

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
