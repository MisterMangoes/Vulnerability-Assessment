; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_01.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_01.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._charVoid = type { [16 x i8], i8* }

@.str = private unnamed_addr constant [32 x i8] c"0123456789abcdef0123456789abcde\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"sizeof(structCharVoid->charFirst) >= bytesToCopy\00", align 1
@.str.2 = private unnamed_addr constant [159 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_01.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [11 x i8] c"int main()\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %structCharVoid = alloca %struct._charVoid*, align 8
  %structCharVoid_1 = alloca %struct._charVoid**, align 8
  %bytesToCopy = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @malloc(i64 24)
  %0 = bitcast i8* %call to %struct._charVoid*
  store %struct._charVoid* %0, %struct._charVoid** %structCharVoid, align 8
  store %struct._charVoid** %structCharVoid, %struct._charVoid*** %structCharVoid_1, align 8
  %1 = load %struct._charVoid**, %struct._charVoid*** %structCharVoid_1, align 8
  %2 = load %struct._charVoid*, %struct._charVoid** %1, align 8
  %voidSecond = getelementptr inbounds %struct._charVoid, %struct._charVoid* %2, i32 0, i32 1
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8** %voidSecond, align 8
  store i32 24, i32* %bytesToCopy, align 4
  %3 = load i32, i32* %bytesToCopy, align 4
  %conv = sext i32 %3 to i64
  %cmp = icmp uge i64 16, %conv
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([159 x i8], [159 x i8]* @.str.2, i64 0, i64 0), i32 26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #4
  unreachable

if.end:                                           ; preds = %if.then
  %4 = load %struct._charVoid*, %struct._charVoid** %structCharVoid, align 8
  %charFirst = getelementptr inbounds %struct._charVoid, %struct._charVoid* %4, i32 0, i32 0
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %charFirst, i64 0, i64 0
  %5 = load i32, i32* %bytesToCopy, align 4
  %conv2 = sext i32 %5 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %arraydecay, i8* align 1 getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i64 %conv2, i1 false)
  %6 = load %struct._charVoid**, %struct._charVoid*** %structCharVoid_1, align 8
  %7 = load %struct._charVoid*, %struct._charVoid** %6, align 8
  %charFirst3 = getelementptr inbounds %struct._charVoid, %struct._charVoid* %7, i32 0, i32 0
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %charFirst3, i64 0, i64 15
  store i8 0, i8* %arrayidx, align 1
  %8 = load %struct._charVoid*, %struct._charVoid** %structCharVoid, align 8
  %charFirst4 = getelementptr inbounds %struct._charVoid, %struct._charVoid* %8, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [16 x i8], [16 x i8]* %charFirst4, i64 0, i64 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* %arraydecay5)
  %9 = load %struct._charVoid*, %struct._charVoid** %structCharVoid, align 8
  %voidSecond7 = getelementptr inbounds %struct._charVoid, %struct._charVoid* %9, i32 0, i32 1
  %10 = load i8*, i8** %voidSecond7, align 8
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i8* %10)
  %11 = load %struct._charVoid*, %struct._charVoid** %structCharVoid, align 8
  %12 = bitcast %struct._charVoid* %11 to i8*
  call void @free(i8* %12)
  ret i32 0
}

declare dso_local i8* @malloc(i64) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local void @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
