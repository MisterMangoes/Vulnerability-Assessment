; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_06.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_06.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.node = type { i32, %struct.node*, %struct.node* }

@.str = private unnamed_addr constant [35 x i8] c"pMemorySize >= sizeof(struct node)\00", align 1
@.str.1 = private unnamed_addr constant [159 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c_SSA/CWE122_Heap_Based_Buffer_Overflow_06.c\00", align 1
@__PRETTY_FUNCTION__.createNode = private unnamed_addr constant [29 x i8] c"struct node *createNode(int)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.node* @createNode(i32 %num) #0 {
entry:
  %num.addr = alloca i32, align 4
  %pMemorySize = alloca i32, align 4
  %p = alloca %struct.node*, align 8
  %p_1 = alloca %struct.node**, align 8
  store i32 %num, i32* %num.addr, align 4
  store i32 8, i32* %pMemorySize, align 4
  %0 = load i32, i32* %pMemorySize, align 4
  %conv = sext i32 %0 to i64
  %call = call i8* @malloc(i64 %conv)
  %1 = bitcast i8* %call to %struct.node*
  store %struct.node* %1, %struct.node** %p, align 8
  %2 = load i32, i32* %pMemorySize, align 4
  %conv1 = sext i32 %2 to i64
  %cmp = icmp uge i64 %conv1, 24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([159 x i8], [159 x i8]* @.str.1, i64 0, i64 0), i32 23, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.createNode, i64 0, i64 0)) #3
  unreachable

if.end:                                           ; preds = %if.then
  store %struct.node** %p, %struct.node*** %p_1, align 8
  %3 = load i32, i32* %num.addr, align 4
  %4 = load %struct.node**, %struct.node*** %p_1, align 8
  %5 = load %struct.node*, %struct.node** %4, align 8
  %data = getelementptr inbounds %struct.node, %struct.node* %5, i32 0, i32 0
  store i32 %3, i32* %data, align 8
  %6 = load %struct.node*, %struct.node** %p, align 8
  ret %struct.node* %6
}

declare dso_local i8* @malloc(i64) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.node*, align 8
  %root_1 = alloca %struct.node**, align 8
  store i32 0, i32* %retval, align 4
  %call = call %struct.node* @createNode(i32 10)
  store %struct.node* %call, %struct.node** %root, align 8
  store %struct.node** %root, %struct.node*** %root_1, align 8
  %call1 = call %struct.node* @createNode(i32 5)
  %0 = load %struct.node**, %struct.node*** %root_1, align 8
  %1 = load %struct.node*, %struct.node** %0, align 8
  %left = getelementptr inbounds %struct.node, %struct.node* %1, i32 0, i32 1
  store %struct.node* %call1, %struct.node** %left, align 8
  %call2 = call %struct.node* @createNode(i32 7)
  %2 = load %struct.node**, %struct.node*** %root_1, align 8
  %3 = load %struct.node*, %struct.node** %2, align 8
  %right = getelementptr inbounds %struct.node, %struct.node* %3, i32 0, i32 2
  store %struct.node* %call2, %struct.node** %right, align 8
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
