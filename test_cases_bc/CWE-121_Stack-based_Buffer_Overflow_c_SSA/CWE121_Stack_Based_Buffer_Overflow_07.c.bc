; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-121_Stack-based_Buffer_Overflow_c_SSA/CWE121_Stack_Based_Buffer_Overflow_07.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-121_Stack-based_Buffer_Overflow_c_SSA/CWE121_Stack_Based_Buffer_Overflow_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@dataArraySize = dso_local global i32 100, align 4
@badData = internal global i32* null, align 8
@.str = private unnamed_addr constant [65 x i8] c"dataArraySize <= ((sizeof(dest)/sizeof(dest[0])) - wcslen(dest))\00", align 1
@.str.1 = private unnamed_addr constant [161 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-121_Stack-based_Buffer_Overflow_c_SSA/CWE121_Stack_Based_Buffer_Overflow_07.c\00", align 1
@__PRETTY_FUNCTION__.badSink = private unnamed_addr constant [15 x i8] c"void badSink()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %data = alloca i32*, align 8
  %data_1 = alloca i32*, align 8
  store i32 0, i32* %retval, align 4
  %0 = load i32, i32* @dataArraySize, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 4
  %1 = alloca i8, i64 %mul, align 16
  %2 = bitcast i8* %1 to i32*
  store i32* %2, i32** %data, align 8
  %3 = load i32*, i32** %data, align 8
  %4 = load i32, i32* @dataArraySize, align 4
  %sub = sub nsw i32 %4, 1
  %conv1 = sext i32 %sub to i64
  %call = call i32* @wmemset(i32* %3, i32 65, i64 %conv1) #4
  %5 = load i32*, i32** %data, align 8
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 0
  store i32* %arrayidx, i32** %data_1, align 8
  %6 = load i32*, i32** %data_1, align 8
  %7 = load i32, i32* @dataArraySize, align 4
  %sub2 = sub nsw i32 %7, 1
  %idx.ext = sext i32 %sub2 to i64
  %add.ptr = getelementptr inbounds i32, i32* %6, i64 %idx.ext
  store i32 0, i32* %add.ptr, align 4
  %8 = load i32*, i32** %data, align 8
  store i32* %8, i32** @badData, align 8
  call void @badSink()
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local i32* @wmemset(i32*, i32, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @badSink() #0 {
entry:
  %dest = alloca [50 x i32], align 16
  %0 = load i32, i32* @dataArraySize, align 4
  %conv = sext i32 %0 to i64
  %arraydecay = getelementptr inbounds [50 x i32], [50 x i32]* %dest, i64 0, i64 0
  %call = call i64 @wcslen(i32* %arraydecay) #5
  %sub = sub i64 50, %call
  %cmp = icmp ule i64 %conv, %sub
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([161 x i8], [161 x i8]* @.str.1, i64 0, i64 0), i32 22, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__PRETTY_FUNCTION__.badSink, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %if.then
  %arraydecay2 = getelementptr inbounds [50 x i32], [50 x i32]* %dest, i64 0, i64 0
  %1 = load i32*, i32** @badData, align 8
  %call3 = call i32* @wcscat(i32* %arraydecay2, i32* %1) #4
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @wcslen(i32*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: nounwind
declare dso_local i32* @wcscat(i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly willreturn }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
