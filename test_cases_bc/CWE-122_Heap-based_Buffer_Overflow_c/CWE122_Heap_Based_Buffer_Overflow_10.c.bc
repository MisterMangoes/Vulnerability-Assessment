; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_10.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@badStatic = internal global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"dataMemorySize >= sizeof(double)\00", align 1
@.str.2 = private unnamed_addr constant [155 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_10.c\00", align 1
@__PRETTY_FUNCTION__.badSource = private unnamed_addr constant [28 x i8] c"double *badSource(double *)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %data = alloca double*, align 8
  store i32 0, i32* %retval, align 4
  store double* null, double** %data, align 8
  store i32 1, i32* @badStatic, align 4
  %0 = load double*, double** %data, align 8
  %call = call double* @badSource(double* %0)
  store double* %call, double** %data, align 8
  %1 = load double*, double** %data, align 8
  %2 = load double, double* %1, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %2)
  %3 = load double*, double** %data, align 8
  %4 = bitcast double* %3 to i8*
  call void @free(i8* %4) #4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double* @badSource(double* %data) #0 {
entry:
  %data.addr = alloca double*, align 8
  %dataMemorySize = alloca i32, align 4
  store double* %data, double** %data.addr, align 8
  %0 = load i32, i32* @badStatic, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  store i32 8, i32* %dataMemorySize, align 4
  %1 = load i32, i32* %dataMemorySize, align 4
  %conv = sext i32 %1 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  %2 = bitcast i8* %call to double*
  store double* %2, double** %data.addr, align 8
  %3 = load i32, i32* %dataMemorySize, align 4
  %conv1 = sext i32 %3 to i64
  %cmp = icmp uge i64 %conv1, 8
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  br label %if.end

if.else:                                          ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([155 x i8], [155 x i8]* @.str.2, i64 0, i64 0), i32 21, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__PRETTY_FUNCTION__.badSource, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %if.then3
  %4 = load double*, double** %data.addr, align 8
  store double 1.700000e+300, double* %4, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %5 = load double*, double** %data.addr, align 8
  ret double* %5
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
