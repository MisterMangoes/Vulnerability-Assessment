; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_02.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_02.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [54 x i8] c"destMemorySize >= 5 * sizeof(char) * max_input_length\00", align 1
@.str.1 = private unnamed_addr constant [155 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_02.c\00", align 1
@__PRETTY_FUNCTION__.copy_input = private unnamed_addr constant [25 x i8] c"char *copy_input(char *)\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @copy_input(i8* %user_supplied_string) #0 {
entry:
  %user_supplied_string.addr = alloca i8*, align 8
  %dst_index = alloca i32, align 4
  %max_input_length = alloca i32, align 4
  %destMemorySize = alloca i32, align 4
  %dst_buf = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %user_supplied_string, i8** %user_supplied_string.addr, align 8
  store i32 0, i32* %dst_index, align 4
  store i32 8, i32* %max_input_length, align 4
  %0 = load i32, i32* %max_input_length, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 4, %conv
  %conv1 = trunc i64 %mul to i32
  store i32 %conv1, i32* %destMemorySize, align 4
  %1 = load i32, i32* %destMemorySize, align 4
  %conv2 = sext i32 %1 to i64
  %call = call i8* @malloc(i64 %conv2)
  store i8* %call, i8** %dst_buf, align 8
  %2 = load i32, i32* %destMemorySize, align 4
  %conv3 = sext i32 %2 to i64
  %3 = load i32, i32* %max_input_length, align 4
  %conv4 = sext i32 %3 to i64
  %mul5 = mul i64 5, %conv4
  %cmp = icmp uge i64 %conv3, %mul5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([155 x i8], [155 x i8]* @.str.1, i64 0, i64 0), i32 30, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__PRETTY_FUNCTION__.copy_input, i64 0, i64 0)) #3
  unreachable

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %conv7 = sext i32 %4 to i64
  %5 = load i8*, i8** %user_supplied_string.addr, align 8
  %call8 = call i64 @strlen(i8* %5)
  %add = add i64 %call8, 1
  %cmp9 = icmp ult i64 %conv7, %add
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %user_supplied_string.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv11 = sext i8 %8 to i32
  %cmp12 = icmp eq i32 38, %conv11
  br i1 %cmp12, label %if.then14, label %if.else29

if.then14:                                        ; preds = %for.body
  %9 = load i8*, i8** %dst_buf, align 8
  %10 = load i32, i32* %dst_index, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %dst_index, align 4
  %idxprom15 = sext i32 %10 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %9, i64 %idxprom15
  store i8 38, i8* %arrayidx16, align 1
  %11 = load i8*, i8** %dst_buf, align 8
  %12 = load i32, i32* %dst_index, align 4
  %inc17 = add nsw i32 %12, 1
  store i32 %inc17, i32* %dst_index, align 4
  %idxprom18 = sext i32 %12 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %11, i64 %idxprom18
  store i8 97, i8* %arrayidx19, align 1
  %13 = load i8*, i8** %dst_buf, align 8
  %14 = load i32, i32* %dst_index, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %dst_index, align 4
  %idxprom21 = sext i32 %14 to i64
  %arrayidx22 = getelementptr inbounds i8, i8* %13, i64 %idxprom21
  store i8 109, i8* %arrayidx22, align 1
  %15 = load i8*, i8** %dst_buf, align 8
  %16 = load i32, i32* %dst_index, align 4
  %inc23 = add nsw i32 %16, 1
  store i32 %inc23, i32* %dst_index, align 4
  %idxprom24 = sext i32 %16 to i64
  %arrayidx25 = getelementptr inbounds i8, i8* %15, i64 %idxprom24
  store i8 112, i8* %arrayidx25, align 1
  %17 = load i8*, i8** %dst_buf, align 8
  %18 = load i32, i32* %dst_index, align 4
  %inc26 = add nsw i32 %18, 1
  store i32 %inc26, i32* %dst_index, align 4
  %idxprom27 = sext i32 %18 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %17, i64 %idxprom27
  store i8 59, i8* %arrayidx28, align 1
  br label %if.end35

if.else29:                                        ; preds = %for.body
  %19 = load i8*, i8** %user_supplied_string.addr, align 8
  %20 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %20 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %19, i64 %idxprom30
  %21 = load i8, i8* %arrayidx31, align 1
  %22 = load i8*, i8** %dst_buf, align 8
  %23 = load i32, i32* %dst_index, align 4
  %inc32 = add nsw i32 %23, 1
  store i32 %inc32, i32* %dst_index, align 4
  %idxprom33 = sext i32 %23 to i64
  %arrayidx34 = getelementptr inbounds i8, i8* %22, i64 %idxprom33
  store i8 %21, i8* %arrayidx34, align 1
  br label %if.end35

if.end35:                                         ; preds = %if.else29, %if.then14
  br label %for.inc

for.inc:                                          ; preds = %if.end35
  %24 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %24, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond, !llvm.loop !2

for.end:                                          ; preds = %for.cond
  %25 = load i8*, i8** %dst_buf, align 8
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %25)
  %26 = load i8*, i8** %dst_buf, align 8
  ret i8* %26
}

declare dso_local i8* @malloc(i64) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %inputBuffer = alloca [8 x i8], align 1
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %inputBuffer, i64 0, i64 0
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %call = call i8* @fgets(i8* %arraydecay, i32 8, %struct._IO_FILE* %0)
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %inputBuffer, i64 0, i64 0
  %call2 = call i8* @copy_input(i8* %arraydecay1)
  ret i32 0
}

declare dso_local i8* @fgets(i8*, i32, %struct._IO_FILE*) #1

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
