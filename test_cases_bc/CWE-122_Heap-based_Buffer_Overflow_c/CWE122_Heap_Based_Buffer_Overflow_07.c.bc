; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_07.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@dataMemorySize = dso_local global i32 200, align 4
@.str = private unnamed_addr constant [55 x i8] c"(dataMemorySize/sizeof(wchar_t) - wcslen(data)) >= 100\00", align 1
@.str.1 = private unnamed_addr constant [155 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-122_Heap-based_Buffer_Overflow_c/CWE122_Heap_Based_Buffer_Overflow_07.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [11 x i8] c"int main()\00", align 1
@.str.2 = private unnamed_addr constant [5 x i32] [i32 37, i32 108, i32 115, i32 10, i32 0], align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @allocatewchar(i32* %data) #0 {
entry:
  %data.addr = alloca i32*, align 8
  store i32* %data, i32** %data.addr, align 8
  %0 = load i32, i32* @dataMemorySize, align 4
  %conv = sext i32 %0 to i64
  %call = call i8* @malloc(i64 %conv)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %data.addr, align 8
  %2 = load i32*, i32** %data.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 0
  store i32 0, i32* %arrayidx, align 4
  %3 = load i32*, i32** %data.addr, align 8
  ret i32* %3
}

declare dso_local i8* @malloc(i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %data = alloca i32*, align 8
  %source = alloca [100 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = load i32*, i32** %data, align 8
  %call = call i32* @allocatewchar(i32* %0)
  store i32* %call, i32** %data, align 8
  %arraydecay = getelementptr inbounds [100 x i32], [100 x i32]* %source, i64 0, i64 0
  %call1 = call i32* @wmemset(i32* %arraydecay, i32 67, i64 99) #5
  %arrayidx = getelementptr inbounds [100 x i32], [100 x i32]* %source, i64 0, i64 99
  store i32 0, i32* %arrayidx, align 4
  %1 = load i32, i32* @dataMemorySize, align 4
  %conv = sext i32 %1 to i64
  %div = udiv i64 %conv, 4
  %2 = load i32*, i32** %data, align 8
  %call2 = call i64 @wcslen(i32* %2) #6
  %sub = sub i64 %div, %call2
  %cmp = icmp uge i64 %sub, 100
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([155 x i8], [155 x i8]* @.str.1, i64 0, i64 0), i32 28, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %if.then
  %3 = load i32*, i32** %data, align 8
  %arraydecay4 = getelementptr inbounds [100 x i32], [100 x i32]* %source, i64 0, i64 0
  %call5 = call i32* @wcsncat(i32* %3, i32* %arraydecay4, i64 100) #5
  %4 = load i32*, i32** %data, align 8
  %call6 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.2, i64 0, i64 0), i32* %4)
  %5 = load i32*, i32** %data, align 8
  %6 = bitcast i32* %5 to i8*
  call void @free(i8* %6)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local i32* @wmemset(i32*, i32, i64) #2

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @wcslen(i32*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #4

; Function Attrs: nounwind
declare dso_local i32* @wcsncat(i32*, i32*, i64) #2

declare dso_local i32 @wprintf(i32*, ...) #1

declare dso_local void @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly willreturn }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
