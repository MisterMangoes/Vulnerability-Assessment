; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_05.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_05.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"BadSink\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"!reversedStringFreed\00", align 1
@.str.3 = private unnamed_addr constant [135 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_05.c\00", align 1
@__PRETTY_FUNCTION__.helperBad = private unnamed_addr constant [24 x i8] c"char *helperBad(char *)\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %reversedString = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  %call = call i8* @helperBad(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  store i8* %call, i8** %reversedString, align 8
  %0 = load i8*, i8** %reversedString, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @helperBad(i8* %aString) #0 {
entry:
  %retval = alloca i8*, align 8
  %aString.addr = alloca i8*, align 8
  %reversedStringFreed = alloca i32, align 4
  %reversedStringFreed_1 = alloca i32*, align 8
  %strLength = alloca i32, align 4
  %reversedString = alloca i8*, align 8
  %reversedString_1 = alloca i8*, align 8
  %i = alloca i32, align 4
  %i_1 = alloca i32*, align 8
  store i8* %aString, i8** %aString.addr, align 8
  store i32 0, i32* %reversedStringFreed, align 4
  store i32* %reversedStringFreed, i32** %reversedStringFreed_1, align 8
  %0 = load i8*, i8** %aString.addr, align 8
  %cmp = icmp ne i8* %0, null
  br i1 %cmp, label %if.then, label %if.else11

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %aString.addr, align 8
  %call = call i64 @strlen(i8* %1)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %strLength, align 4
  %2 = load i32, i32* %strLength, align 4
  %add = add nsw i32 %2, 1
  %conv1 = sext i32 %add to i64
  %call2 = call noalias i8* @malloc(i64 %conv1) #4
  store i8* %call2, i8** %reversedString, align 8
  %3 = load i8*, i8** %reversedString, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  store i8* %arrayidx, i8** %reversedString_1, align 8
  store i32 0, i32* %i, align 4
  store i32* %i, i32** %i_1, align 8
  %4 = load i32*, i32** %i_1, align 8
  store i32 0, i32* %4, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %strLength, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %aString.addr, align 8
  %8 = load i32, i32* %strLength, align 4
  %9 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, %9
  %sub5 = sub nsw i32 %sub, 1
  %idxprom = sext i32 %sub5 to i64
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %reversedString, align 8
  %12 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %12 to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  store i8 %10, i8* %add.ptr, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %13, 1
  %14 = load i32*, i32** %i_1, align 8
  store i32 %add7, i32* %14, align 4
  br label %for.cond, !llvm.loop !2

for.end:                                          ; preds = %for.cond
  %15 = load i8*, i8** %reversedString, align 8
  %16 = load i32, i32* %strLength, align 4
  %idx.ext8 = sext i32 %16 to i64
  %add.ptr9 = getelementptr inbounds i8, i8* %15, i64 %idx.ext8
  store i8 0, i8* %add.ptr9, align 1
  %17 = load i8*, i8** %reversedString, align 8
  call void @free(i8* %17) #4
  %18 = load i32*, i32** %reversedStringFreed_1, align 8
  store i32 1, i32* %18, align 4
  %19 = load i32, i32* %reversedStringFreed, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.else, label %if.then10

if.then10:                                        ; preds = %for.end
  br label %if.end

if.else:                                          ; preds = %for.end
  call void @__assert_fail(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.3, i64 0, i64 0), i32 30, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__PRETTY_FUNCTION__.helperBad, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %if.then10
  %20 = load i8*, i8** %reversedString, align 8
  store i8* %20, i8** %retval, align 8
  br label %return

if.else11:                                        ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else11, %if.end
  %21 = load i8*, i8** %retval, align 8
  ret i8* %21
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @strlen(i8*) #1

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
