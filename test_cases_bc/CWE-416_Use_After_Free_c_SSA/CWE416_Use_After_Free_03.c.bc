; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_03.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_03.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.inputBuffer = private unnamed_addr constant [5 x i8] c"hhhi\00", align 1
@.str = private unnamed_addr constant [14 x i8] c"!dst_bufFreed\00", align 1
@.str.1 = private unnamed_addr constant [135 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_03.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [11 x i8] c"int main()\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %dst_bufFreed = alloca i32, align 4
  %dst_bufFreed_1 = alloca i32*, align 8
  %inputBuffer = alloca [5 x i8], align 1
  %dst_buf = alloca i8*, align 8
  %dst_buf_1 = alloca i8*, align 8
  %dst_index = alloca i32, align 4
  %i = alloca i32, align 4
  %i_1 = alloca i32*, align 8
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %dst_bufFreed, align 4
  store i32* %dst_bufFreed, i32** %dst_bufFreed_1, align 8
  %0 = bitcast [5 x i8]* %inputBuffer to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.inputBuffer, i32 0, i32 0), i64 5, i1 false)
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %inputBuffer, i64 0, i64 0
  %call = call i64 @strlen(i8* %arraydecay)
  %mul = mul i64 5, %call
  %call1 = call i8* @malloc(i64 %mul)
  store i8* %call1, i8** %dst_buf, align 8
  %1 = load i8*, i8** %dst_buf, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  store i8* %arrayidx, i8** %dst_buf_1, align 8
  store i32 0, i32* %dst_index, align 4
  store i32 0, i32* %i, align 4
  store i32* %i, i32** %i_1, align 8
  %2 = load i32*, i32** %i_1, align 8
  store i32 0, i32* %2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %conv = sext i32 %3 to i64
  %arraydecay2 = getelementptr inbounds [5 x i8], [5 x i8]* %inputBuffer, i64 0, i64 0
  %call3 = call i64 @strlen(i8* %arraydecay2)
  %add = add i64 %call3, 1
  %cmp = icmp ult i64 %conv, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx5 = getelementptr inbounds [5 x i8], [5 x i8]* %inputBuffer, i64 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %cmp7 = icmp eq i32 104, %conv6
  br i1 %cmp7, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i8*, i8** %dst_buf_1, align 8
  %7 = load i32, i32* %dst_index, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %dst_index, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %idx.ext
  store i8 104, i8* %add.ptr, align 1
  %8 = load i8*, i8** %dst_buf_1, align 8
  %9 = load i32, i32* %dst_index, align 4
  %inc9 = add nsw i32 %9, 1
  store i32 %inc9, i32* %dst_index, align 4
  %idx.ext10 = sext i32 %9 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %8, i64 %idx.ext10
  store i8 101, i8* %add.ptr11, align 1
  %10 = load i8*, i8** %dst_buf_1, align 8
  %11 = load i32, i32* %dst_index, align 4
  %inc12 = add nsw i32 %11, 1
  store i32 %inc12, i32* %dst_index, align 4
  %idx.ext13 = sext i32 %11 to i64
  %add.ptr14 = getelementptr inbounds i8, i8* %10, i64 %idx.ext13
  store i8 108, i8* %add.ptr14, align 1
  %12 = load i8*, i8** %dst_buf_1, align 8
  %13 = load i32, i32* %dst_index, align 4
  %inc15 = add nsw i32 %13, 1
  store i32 %inc15, i32* %dst_index, align 4
  %idx.ext16 = sext i32 %13 to i64
  %add.ptr17 = getelementptr inbounds i8, i8* %12, i64 %idx.ext16
  store i8 108, i8* %add.ptr17, align 1
  %14 = load i8*, i8** %dst_buf_1, align 8
  %15 = load i32, i32* %dst_index, align 4
  %inc18 = add nsw i32 %15, 1
  store i32 %inc18, i32* %dst_index, align 4
  %idx.ext19 = sext i32 %15 to i64
  %add.ptr20 = getelementptr inbounds i8, i8* %14, i64 %idx.ext19
  store i8 111, i8* %add.ptr20, align 1
  br label %if.end

if.else:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %16 to i64
  %arrayidx22 = getelementptr inbounds [5 x i8], [5 x i8]* %inputBuffer, i64 0, i64 %idxprom21
  %17 = load i8, i8* %arrayidx22, align 1
  %18 = load i8*, i8** %dst_buf_1, align 8
  %19 = load i32, i32* %dst_index, align 4
  %inc23 = add nsw i32 %19, 1
  store i32 %inc23, i32* %dst_index, align 4
  %idx.ext24 = sext i32 %19 to i64
  %add.ptr25 = getelementptr inbounds i8, i8* %18, i64 %idx.ext24
  store i8 %17, i8* %add.ptr25, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %i, align 4
  %add26 = add nsw i32 %20, 1
  %21 = load i32*, i32** %i_1, align 8
  store i32 %add26, i32* %21, align 4
  br label %for.cond, !llvm.loop !2

for.end:                                          ; preds = %for.cond
  %22 = load i8*, i8** %dst_buf, align 8
  call void @free(i8* %22)
  %23 = load i32*, i32** %dst_bufFreed_1, align 8
  store i32 1, i32* %23, align 4
  %24 = load i32, i32* %dst_bufFreed, align 4
  %tobool = icmp ne i32 %24, 0
  br i1 %tobool, label %if.else28, label %if.then27

if.then27:                                        ; preds = %for.end
  br label %if.end29

if.else28:                                        ; preds = %for.end
  call void @__assert_fail(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.1, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #4
  unreachable

if.end29:                                         ; preds = %if.then27
  %25 = load i8*, i8** %dst_buf, align 8
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %25)
  ret i32 0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i8* @malloc(i64) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #3

declare dso_local i32 @printf(i8*, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
