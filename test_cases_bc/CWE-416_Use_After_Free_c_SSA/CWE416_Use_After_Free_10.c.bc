; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_10.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.node = type { i32, %struct.node* }

@p = dso_local global %struct.node* null, align 8
@p_1 = dso_local global %struct.node** @p, align 8
@p_freed = dso_local global i32 0, align 4
@p_freed_1 = dso_local global i32* @p_freed, align 8
@.str = private unnamed_addr constant [9 x i8] c"!p_freed\00", align 1
@.str.1 = private unnamed_addr constant [135 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_10.c\00", align 1
@__PRETTY_FUNCTION__.assert_p = private unnamed_addr constant [16 x i8] c"void assert_p()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @assert_p() #0 {
entry:
  %0 = load i32, i32* @p_freed, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.1, i64 0, i64 0), i32 28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__PRETTY_FUNCTION__.assert_p, i64 0, i64 0)) #3
  unreachable

if.end:                                           ; preds = %if.then
  %1 = load %struct.node*, %struct.node** @p, align 8
  %next = getelementptr inbounds %struct.node, %struct.node* %1, i32 0, i32 1
  %2 = load %struct.node*, %struct.node** %next, align 8
  %3 = load %struct.node**, %struct.node*** @p_1, align 8
  store %struct.node* %2, %struct.node** %3, align 8
  %4 = load i32*, i32** @p_freed_1, align 8
  store i32 0, i32* %4, align 4
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_list(%struct.node* %head) #0 {
entry:
  %head.addr = alloca %struct.node*, align 8
  store %struct.node* %head, %struct.node** %head.addr, align 8
  %0 = load %struct.node*, %struct.node** %head.addr, align 8
  %1 = load %struct.node**, %struct.node*** @p_1, align 8
  store %struct.node* %0, %struct.node** %1, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.node*, %struct.node** @p, align 8
  %cmp = icmp ne %struct.node* %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.node*, %struct.node** @p, align 8
  %4 = bitcast %struct.node* %3 to i8*
  call void @free(i8* %4) #4
  %5 = load i32*, i32** @p_freed_1, align 8
  store i32 1, i32* %5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  call void @assert_p()
  br label %for.cond, !llvm.loop !2

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %node1 = alloca %struct.node*, align 8
  %node2 = alloca %struct.node*, align 8
  %node1_1 = alloca %struct.node**, align 8
  %node2_1 = alloca %struct.node**, align 8
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @malloc(i64 16) #4
  %0 = bitcast i8* %call to %struct.node*
  store %struct.node* %0, %struct.node** %node1, align 8
  %call1 = call noalias i8* @malloc(i64 16) #4
  %1 = bitcast i8* %call1 to %struct.node*
  store %struct.node* %1, %struct.node** %node2, align 8
  store %struct.node** %node1, %struct.node*** %node1_1, align 8
  store %struct.node** %node2, %struct.node*** %node2_1, align 8
  %2 = load %struct.node**, %struct.node*** %node1_1, align 8
  %3 = load %struct.node*, %struct.node** %2, align 8
  %value = getelementptr inbounds %struct.node, %struct.node* %3, i32 0, i32 0
  store i32 5, i32* %value, align 8
  %4 = load %struct.node**, %struct.node*** %node2_1, align 8
  %5 = load %struct.node*, %struct.node** %4, align 8
  %value2 = getelementptr inbounds %struct.node, %struct.node* %5, i32 0, i32 0
  store i32 9, i32* %value2, align 8
  %6 = load %struct.node*, %struct.node** %node2, align 8
  %7 = load %struct.node**, %struct.node*** %node1_1, align 8
  %8 = load %struct.node*, %struct.node** %7, align 8
  %next = getelementptr inbounds %struct.node, %struct.node* %8, i32 0, i32 1
  store %struct.node* %6, %struct.node** %next, align 8
  %9 = load %struct.node**, %struct.node*** %node2_1, align 8
  %10 = load %struct.node*, %struct.node** %9, align 8
  %next3 = getelementptr inbounds %struct.node, %struct.node* %10, i32 0, i32 1
  store %struct.node* null, %struct.node** %next3, align 8
  %11 = load %struct.node*, %struct.node** %node1, align 8
  call void @free_list(%struct.node* %11)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
