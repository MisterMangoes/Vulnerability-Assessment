; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_07.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_07.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@buf1Freed = dso_local global i32 0, align 4
@buf1Freed_1 = dso_local global i32* @buf1Freed, align 8
@buf2Freed = dso_local global i32 0, align 4
@buf2Freed_1 = dso_local global i32* @buf2Freed, align 8
@buf3Freed = dso_local global i32 0, align 4
@buf3Freed_1 = dso_local global i32* @buf3Freed, align 8
@buf1 = dso_local global i8* null, align 8
@buf2 = dso_local global i8* null, align 8
@buf3 = dso_local global i8* null, align 8
@.str = private unnamed_addr constant [11 x i8] c"abcde12345\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"!buf2Freed\00", align 1
@.str.2 = private unnamed_addr constant [135 x i8] c"/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/CWE-416_Use_After_Free_c_SSA/CWE416_Use_After_Free_07.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [11 x i8] c"int main()\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"qwertyuiop\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"abcde\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @assignBuffers() #0 {
entry:
  %call = call i8* @malloc(i64 10)
  store i8* %call, i8** @buf1, align 8
  %call1 = call i8* @malloc(i64 10)
  store i8* %call1, i8** @buf2, align 8
  %0 = load i8*, i8** @buf2, align 8
  call void @free(i8* %0)
  %1 = load i32*, i32** @buf2Freed_1, align 8
  store i32 1, i32* %1, align 4
  %call2 = call i8* @malloc(i64 5)
  store i8* %call2, i8** @buf3, align 8
  ret void
}

declare dso_local i8* @malloc(i64) #1

declare dso_local void @free(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @assignBuffers()
  %0 = load i8*, i8** @buf1, align 8
  %call = call i8* @strncpy(i8* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 9)
  %1 = load i32, i32* @buf2Freed, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.2, i64 0, i64 0), i32 39, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #3
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load i8*, i8** @buf2, align 8
  %call1 = call i8* @strncpy(i8* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i64 9)
  %3 = load i8*, i8** @buf3, align 8
  %call2 = call i8* @strncpy(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i64 4)
  %4 = load i8*, i8** @buf1, align 8
  call void @free(i8* %4)
  %5 = load i32*, i32** @buf1Freed_1, align 8
  store i32 1, i32* %5, align 4
  %6 = load i8*, i8** @buf3, align 8
  call void @free(i8* %6)
  %7 = load i32*, i32** @buf3Freed_1, align 8
  store i32 1, i32* %7, align 4
  ret i32 0
}

declare dso_local i8* @strncpy(i8*, i8*, i64) #1

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
