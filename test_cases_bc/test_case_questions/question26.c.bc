; ModuleID = '/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases_bc/test_case_questions/question26.c.bc'
source_filename = "/home/runner/work/Vulnerability-Assessment/Vulnerability-Assessment/test_cases/test_case_questions/question26.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@dataArraySize = dso_local global i32 20, align 4
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @badSink_b(i8* %data) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %dataFreed = alloca i32, align 4
  %source = alloca [60 x i8], align 16
  %bytesToCopy = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 0, i32* %dataFreed, align 4
  store i32 59, i32* %bytesToCopy, align 4
  %arraydecay = getelementptr inbounds [60 x i8], [60 x i8]* %source, i64 0, i64 0
  %0 = load i32, i32* %bytesToCopy, align 4
  %conv = sext i32 %0 to i64
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay, i8 70, i64 %conv, i1 false)
  %arrayidx = getelementptr inbounds [60 x i8], [60 x i8]* %source, i64 0, i64 59
  store i8 0, i8* %arrayidx, align 1
  %1 = load i8*, i8** %data.addr, align 8
  %arraydecay1 = getelementptr inbounds [60 x i8], [60 x i8]* %source, i64 0, i64 0
  %call = call i8* @strcpy(i8* %1, i8* %arraydecay1)
  %2 = load i8*, i8** %data.addr, align 8
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %2)
  %3 = load i8*, i8** %data.addr, align 8
  call void @free(i8* %3)
  store i32 1, i32* %dataFreed, align 4
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @badSink_a(i8* %data) #0 {
entry:
  %data.addr = alloca i8*, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  call void @badSink_b(i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %data = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  %0 = load i32, i32* @dataArraySize, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 %conv, 1
  %call = call i8* @malloc(i64 %mul)
  store i8* %call, i8** %data, align 8
  %1 = load i8*, i8** %data, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  store i8 0, i8* %arrayidx, align 1
  %2 = load i8*, i8** %data, align 8
  call void @badSink_a(i8* %2)
  ret i32 0
}

declare dso_local i8* @malloc(i64) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
